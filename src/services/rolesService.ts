import { BaseService } from './baseService';
import type { UserRole, RolePermissions, RoleInfo } from '../types/roles';
import type { AIService, CompanyContext } from './types';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
import serviceManager from './serviceManager';

export interface GeneratedRolePermissions extends RolePermissions {
  roleId: UserRole;
  businessContext: string;
  reasoning: string;
  recommendedResponsibilities: string[];
  securityLevel: 'maximum' | 'high' | 'medium' | 'low' | 'basic';
}

export interface GeneratedRoleInfo extends RoleInfo {
  roleId: UserRole;
  hierarchyLevel: number;
  typicalResponsibilities: string[];
  careerPath: string[];
  trainingRequirements: string[];
}

export interface RolesConfiguration {
  companySize: 'startup' | 'small' | 'medium' | 'large' | 'enterprise';
  industry: string;
  organizationalStructure: 'hierarchical' | 'flat' | 'matrix';
  securityRequirements: 'basic' | 'standard' | 'high' | 'maximum';
  roles: GeneratedRolePermissions[];
  roleInfos: GeneratedRoleInfo[];
  recommendations: string[];
}

class RolesService extends BaseService implements AIService {
  private companyContext: CompanyContext | null = null;

  constructor() {
    super();
  }

  public setCompanyContext(context: CompanyContext): void {
    this.companyContext = context;
  }

  public getCompanyContext(): CompanyContext | null {
    return this.companyContext;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
  async generateRolesConfiguration(
    companySize: string = 'medium',
    industry: string = 'IT',
    orgStructure: string = 'hierarchical',
    securityLevel: string = 'standard'
  ): Promise<RolesConfiguration> {
    const cacheKey = this.generateCacheKey('roles_config', companySize, industry, orgStructure, securityLevel);

    return this.withCache(
      cacheKey,
      async () => {
        try {
          const prompt = `–°–æ–∑–¥–∞–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏.

–ö–û–ù–¢–ï–ö–°–¢ –ö–û–ú–ü–ê–ù–ò–ò:
- –†–∞–∑–º–µ—Ä: ${companySize}
- –û—Ç—Ä–∞—Å–ª—å: ${industry}
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${orgStructure}
- –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${securityLevel}

–ó–ê–î–ê–ß–ê:
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–∏—Å—Ç–µ–º—É —Ä–æ–ª–µ–π —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ –¥–ª—è HR —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏:

1. –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê:
   - canAccessHRChat, canAccessOrgChart, canAccessEmployees
   - canAccessAssessments, canAccessReports
   - canCreateUsers, canEditUsers, canDeleteUsers, canManageCompany
   - canAccessSettings, canGenerateInvites, canManageRoles, canViewAllData
   - maxInvitesPerDay, maxAssessmentsPerMonth

2. –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–û–õ–ò:
   - name, description, color, icon
   - hierarchyLevel, typicalResponsibilities
   - careerPath, trainingRequirements

–†–û–õ–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò:
- administrator (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã)
- managing_director (—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä)
- director (–¥–∏—Ä–µ–∫—Ç–æ—Ä)
- manager (—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å)
- employee (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫)

–£–ß–¢–ò:
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —á–µ–º –≤—ã—à–µ —Ä–æ–ª—å, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–≤
- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
- –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏: —Å–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–º–æ—á–∏–π

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "companySize": "${companySize}",
  "industry": "${industry}",
  "organizationalStructure": "${orgStructure}",
  "securityRequirements": "${securityLevel}",
  "roles": [
    {
      "roleId": "administrator",
      "businessContext": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
      "reasoning": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏",
      "recommendedResponsibilities": ["—Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π"],
      "securityLevel": "maximum",
      "canAccessHRChat": true,
      "canAccessOrgChart": true,
      "canAccessEmployees": true,
      "canAccessAssessments": true,
      "canAccessReports": true,
      "canCreateUsers": true,
      "canEditUsers": true,
      "canDeleteUsers": true,
      "canManageCompany": true,
      "canAccessSettings": true,
      "canGenerateInvites": true,
      "canManageRoles": true,
      "canViewAllData": true,
      "maxInvitesPerDay": null,
      "maxAssessmentsPerMonth": null
    }
  ],
  "roleInfos": [
    {
      "roleId": "administrator",
      "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏",
      "color": "bg-red-100 text-red-800 border-red-200",
      "icon": "üîê",
      "hierarchyLevel": 5,
      "typicalResponsibilities": ["—Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π"],
      "careerPath": ["–∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Å—Ç—É–ø–µ–Ω–∏"],
      "trainingRequirements": ["—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—É—á–µ–Ω–∏—é"]
    }
  ],
  "recommendations": ["–æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ —Ä–æ–ª–µ–π"]
}`;

          const messages = [
            { role: 'system', content: prompt }
          ];

          const response = await this.callOpenAI(messages, { model: 'gpt-4o-mini' });
          // –£–¥–∞–ª—è–µ–º –∫–æ–¥–æ–≤—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
          const cleanedResponse = response.replace(/```(?:json)?/g, '').trim();
          const configuration: RolesConfiguration = JSON.parse(cleanedResponse);
          return configuration;
        } catch (error) {
          console.error('Error generating roles configuration:', error);
          return this.getFallbackRolesConfiguration(companySize, industry, orgStructure, securityLevel);
        }
      },
      60 // –ö–µ—à –Ω–∞ 60 –º–∏–Ω—É—Ç
    );
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏
  async generateRolePermissions(
    roleId: UserRole,
    companyContext: {
      size: string;
      industry: string;
      structure: string;
      security: string;
    }
  ): Promise<GeneratedRolePermissions> {
    try {
      const prompt = `–û–ø—Ä–µ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏ ${roleId} –≤ –∫–æ–º–ø–∞–Ω–∏–∏.

–ö–û–ù–¢–ï–ö–°–¢:
- –ö–æ–º–ø–∞–Ω–∏—è: ${companyContext.size} —Ä–∞–∑–º–µ—Ä, –æ—Ç—Ä–∞—Å–ª—å ${companyContext.industry}
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${companyContext.structure}
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${companyContext.security}

–†–û–õ–¨: ${roleId}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫–∞–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω—É–∂–Ω—ã –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
–£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏–π
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π.`;

      const messages = [
        { role: 'system', content: prompt }
      ];

      const response = await this.callOpenAI(messages, 'gpt-4o-mini');
      // –£–¥–∞–ª—è–µ–º –∫–æ–¥–æ–≤—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
      const cleanedPermResponse = response.replace(/```(?:json)?/g, '').trim();
      const permissions: GeneratedRolePermissions = JSON.parse(cleanedPermResponse);

      return permissions;
    } catch (error) {
      console.error(`Error generating permissions for role ${roleId}:`, error);
      return this.getFallbackRolePermissions(roleId);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏
  async generateRoleInfo(
    roleId: UserRole,
    companyContext: {
      size: string;
      industry: string;
      structure: string;
    }
  ): Promise<GeneratedRoleInfo> {
    try {
      const prompt = `–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–æ–ª–∏ ${roleId}.

–ö–û–ù–¢–ï–ö–°–¢ –ö–û–ú–ü–ê–ù–ò–ò:
- –†–∞–∑–º–µ—Ä: ${companyContext.size}
- –û—Ç—Ä–∞—Å–ª—å: ${companyContext.industry}
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${companyContext.structure}

–†–û–õ–¨: ${roleId}

–ó–ê–î–ê–ß–ê:
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏:
- –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
- –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –∏ –∏–∫–æ–Ω–∫–∞
- –£—Ä–æ–≤–µ–Ω—å –∏–µ—Ä–∞—Ä—Ö–∏–∏ (1-5, –≥–¥–µ 5 - –≤—ã—Å—à–∏–π)
- –¢–∏–ø–∏—á–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
- –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å
- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—É—á–µ–Ω–∏—é

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.`;

      const messages = [
        { role: 'system', content: prompt }
      ];

      const response = await this.callOpenAI(messages, 'gpt-4o-mini');
      // –£–¥–∞–ª—è–µ–º –∫–æ–¥–æ–≤—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
      const cleanedInfoResponse = response.replace(/```(?:json)?/g, '').trim();
      const roleInfo: GeneratedRoleInfo = JSON.parse(cleanedInfoResponse);

      return roleInfo;
    } catch (error) {
      console.error(`Error generating info for role ${roleId}:`, error);
      return this.getFallbackRoleInfo(roleId);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π
  async analyzeRolesEffectiveness(
    currentRoles: Record<UserRole, RolePermissions>,
    companyMetrics: {
      employeeCount: number;
      departmentCount: number;
      securityIncidents: number;
      accessRequests: number;
    }
  ): Promise<{
    effectiveness: number; // 0-100
    strengths: string[];
    weaknesses: string[];
    recommendations: string[];
    optimalRoles: UserRole[];
  }> {
    try {
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π.

–ú–ï–¢–†–ò–ö–ò –ö–û–ú–ü–ê–ù–ò–ò:
- –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${companyMetrics.employeeCount}
- –û—Ç–¥–µ–ª–æ–≤: ${companyMetrics.departmentCount}
- –ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${companyMetrics.securityIncidents}
- –ó–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–∞: ${companyMetrics.accessRequests}

–¢–ï–ö–£–©–ò–ï –†–û–õ–ò:
${Object.entries(currentRoles).map(([role, perms]) =>
  `${role}: ${Object.entries(perms).filter(([, value]) => value === true).length} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π`
).join('\n')}

–ó–ê–î–ê–ß–ê:
–û—Ü–µ–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –ø–æ —à–∫–∞–ª–µ 0-100.
–û–ø—Ä–µ–¥–µ–ª–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.
–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.`;

      const messages = [
        { role: 'system', content: prompt }
      ];

      const response = await this.callOpenAI(messages, 'gpt-4o-mini');
      // –£–¥–∞–ª—è–µ–º –∫–æ–¥–æ–≤—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
      const cleanedAnalysisResponse = response.replace(/```(?:json)?/g, '').trim();
      return JSON.parse(cleanedAnalysisResponse);
    } catch (error) {
      console.error('Error analyzing roles effectiveness:', error);
      return {
        effectiveness: 70,
        strengths: ['–ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'],
        weaknesses: ['–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏'],
        recommendations: ['–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π', '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏ –ø–æ–¥ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã'],
        optimalRoles: ['administrator', 'managing_director', 'director', 'manager', 'employee']
      };
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–æ–ª–µ–π
  async generateSecurityRecommendations(
    roles: Record<UserRole, RolePermissions>,
    securityLevel: string
  ): Promise<{
    overallSecurity: number;
    criticalPermissions: string[];
    securityRecommendations: string[];
    auditRecommendations: string[];
  }> {
    try {
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π.

–¢–†–ï–ë–£–ï–ú–´–ô –£–†–û–í–ï–ù–¨ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: ${securityLevel}

–¢–ï–ö–£–©–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø:
${Object.entries(roles).map(([role, perms]) =>
  `${role}: ${JSON.stringify(perms)}`
).join('\n')}

–ó–ê–î–ê–ß–ê:
1. –û—Ü–µ–Ω–∏ –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (0-100)
2. –í—ã—è–≤–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
3. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–∏–ª–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –º–µ—Ä—ã –∞—É–¥–∏—Ç–∞

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.`;

      const messages = [
        { role: 'system', content: prompt }
      ];

      const response = await this.callOpenAI(messages, 'gpt-4o-mini');
      // –£–¥–∞–ª—è–µ–º –∫–æ–¥–æ–≤—ã–µ –æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
      const cleanedSecurityResponse = response.replace(/```(?:json)?/g, '').trim();
      return JSON.parse(cleanedSecurityResponse);
    } catch (error) {
      console.error('Error generating security recommendations:', error);
      return {
        overallSecurity: 75,
        criticalPermissions: ['canDeleteUsers', 'canManageRoles', 'canViewAllData'],
        securityRecommendations: ['–í–Ω–µ–¥—Ä–∏—Ç—å –º–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é', '–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–∞'],
        auditRecommendations: ['–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –∞—É–¥–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π', '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤']
      };
    }
  }


  // Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ–ª–µ–π
  private getFallbackRolesConfiguration(
    companySize: string,
    industry: string,
    orgStructure: string,
    securityLevel: string
  ): RolesConfiguration {
    return {
      companySize: companySize as any,
      industry,
      organizationalStructure: orgStructure as any,
      securityRequirements: securityLevel as any,
      roles: [
        this.getFallbackRolePermissions('administrator'),
        this.getFallbackRolePermissions('managing_director'),
        this.getFallbackRolePermissions('director'),
        this.getFallbackRolePermissions('manager'),
        this.getFallbackRolePermissions('employee')
      ],
      roleInfos: [
        this.getFallbackRoleInfo('administrator'),
        this.getFallbackRoleInfo('managing_director'),
        this.getFallbackRoleInfo('director'),
        this.getFallbackRoleInfo('manager'),
        this.getFallbackRoleInfo('employee')
      ],
      recommendations: [
        '–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–í–Ω–µ–¥—Ä—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π',
        '–ü—Ä–æ–≤–æ–¥–∏—Ç—å –∞—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      ]
    };
  }

  // Fallback —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏
  private getFallbackRolePermissions(roleId: UserRole): GeneratedRolePermissions {
    const basePermissions = {
      administrator: {
        canAccessHRChat: true,
        canAccessOrgChart: true,
        canAccessEmployees: true,
        canAccessAssessments: true,
        canAccessReports: true,
        canCreateUsers: true,
        canEditUsers: true,
        canDeleteUsers: true,
        canManageCompany: true,
        canAccessSettings: true,
        canGenerateInvites: true,
        canManageRoles: true,
        canViewAllData: true,
        maxInvitesPerDay: undefined,
        maxAssessmentsPerMonth: undefined,
      },
      managing_director: {
        canAccessHRChat: true,
        canAccessOrgChart: true,
        canAccessEmployees: true,
        canAccessAssessments: true,
        canAccessReports: true,
        canCreateUsers: true,
        canEditUsers: true,
        canDeleteUsers: true,
        canManageCompany: true,
        canAccessSettings: true,
        canGenerateInvites: true,
        canManageRoles: true,
        canViewAllData: true,
        maxInvitesPerDay: undefined,
        maxAssessmentsPerMonth: undefined,
      },
      director: {
        canAccessHRChat: true,
        canAccessOrgChart: true,
        canAccessEmployees: true,
        canAccessAssessments: true,
        canAccessReports: true,
        canCreateUsers: true,
        canEditUsers: true,
        canDeleteUsers: false,
        canManageCompany: true,
        canAccessSettings: false,
        canGenerateInvites: true,
        canManageRoles: false,
        canViewAllData: true,
        maxInvitesPerDay: undefined,
        maxAssessmentsPerMonth: undefined,
      },
      manager: {
        canAccessHRChat: true,
        canAccessOrgChart: true,
        canAccessEmployees: true,
        canAccessAssessments: true,
        canAccessReports: false,
        canCreateUsers: false,
        canEditUsers: true,
        canDeleteUsers: false,
        canManageCompany: false,
        canAccessSettings: false,
        canGenerateInvites: true,
        canManageRoles: false,
        canViewAllData: false,
        maxInvitesPerDay: 10,
        maxAssessmentsPerMonth: 50,
      },
      employee: {
        canAccessHRChat: true,
        canAccessOrgChart: true,
        canAccessEmployees: false,
        canAccessAssessments: false,
        canAccessReports: false,
        canCreateUsers: false,
        canEditUsers: false,
        canDeleteUsers: false,
        canManageCompany: false,
        canAccessSettings: false,
        canGenerateInvites: false,
        canManageRoles: false,
        canViewAllData: false,
        maxInvitesPerDay: 0,
        maxAssessmentsPerMonth: 5,
      }
    };

    return {
      roleId,
      businessContext: `–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–æ–ª—å ${roleId}`,
      reasoning: '–ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏',
      recommendedResponsibilities: ['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π'],
      securityLevel: roleId === 'administrator' ? 'maximum' : roleId === 'employee' ? 'basic' : 'medium',
      ...basePermissions[roleId]
    } as GeneratedRolePermissions;
  }

  // Fallback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏
  private getFallbackRoleInfo(roleId: UserRole): GeneratedRoleInfo {
    const baseInfos = {
      administrator: {
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
        color: 'bg-red-100 text-red-800 border-red-200',
        icon: 'üîê',
        hierarchyLevel: 5,
        typicalResponsibilities: ['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'],
        careerPath: ['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç IT', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'],
        trainingRequirements: ['–ö—É—Ä—Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è']
      },
      managing_director: {
        name: '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
        description: '–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–∏',
        color: 'bg-purple-100 text-purple-800 border-purple-200',
        icon: 'üëë',
        hierarchyLevel: 5,
        typicalResponsibilities: ['–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π'],
        careerPath: ['–ú–µ–Ω–µ–¥–∂–µ—Ä', '–î–∏—Ä–µ–∫—Ç–æ—Ä', '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'],
        trainingRequirements: ['MBA', '–ö—É—Ä—Å –ª–∏–¥–µ—Ä—Å—Ç–≤–∞']
      },
      director: {
        name: '–î–∏—Ä–µ–∫—Ç–æ—Ä',
        description: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–µ–π',
        color: 'bg-orange-100 text-orange-800 border-orange-200',
        icon: '‚≠ê',
        hierarchyLevel: 4,
        typicalResponsibilities: ['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–º', '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
        careerPath: ['–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–î–∏—Ä–µ–∫—Ç–æ—Ä'],
        trainingRequirements: ['–ö—É—Ä—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –æ—Ç—Ä–∞—Å–ª–∏']
      },
      manager: {
        name: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–º –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏',
        color: 'bg-blue-100 text-blue-800 border-blue-200',
        icon: 'üëî',
        hierarchyLevel: 3,
        typicalResponsibilities: ['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π', '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'],
        careerPath: ['–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'],
        trainingRequirements: ['–ö—É—Ä—Å –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞', '–ù–∞–≤—ã–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è']
      },
      employee: {
        name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
        description: '–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ HR —Ñ—É–Ω–∫—Ü–∏—è–º',
        color: 'bg-green-100 text-green-800 border-green-200',
        icon: 'üë§',
        hierarchyLevel: 1,
        typicalResponsibilities: ['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á', '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'],
        careerPath: ['–°—Ç–∞–∂–µ—Ä', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–°—Ç–∞—Ä—à–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'],
        trainingRequirements: ['–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏—é', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã']
      }
    };

    return {
      roleId,
      ...baseInfos[roleId]
    } as GeneratedRoleInfo;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
  clearCache(): void {
    this.cache.clear();
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const rolesService = new RolesService();
serviceManager.registerService('roles', rolesService);

export default rolesService;
export { RolesService };
export type { RolesConfiguration, GeneratedRolePermissions, GeneratedRoleInfo };
