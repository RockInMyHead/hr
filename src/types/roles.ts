export type UserRole = 'administrator' | 'managing_director' | 'director' | 'manager' | 'employee';

export interface RolePermissions {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  canAccessHRChat: boolean;
  canAccessOrgChart: boolean;
  canAccessEmployees: boolean;
  canAccessAssessments: boolean;
  canAccessReports: boolean;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  canCreateUsers: boolean;
  canEditUsers: boolean;
  canDeleteUsers: boolean;
  canManageCompany: boolean;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
  canAccessSettings: boolean;
  canGenerateInvites: boolean;
  canManageRoles: boolean;
  canViewAllData: boolean;

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  maxInvitesPerDay?: number;
  maxAssessmentsPerMonth?: number;
}

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
import { RolesService, GeneratedRolePermissions, GeneratedRoleInfo, RolesConfiguration } from '../services/rolesService';

// –ö–µ—à –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
let rolesService: RolesService | null = null;
let rolesConfiguration: RolesConfiguration | null = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–æ–ª–µ–π
async function initializeRolesService(): Promise<void> {
  if (!rolesService) {
    rolesService = new RolesService();
  }
  if (!rolesConfiguration) {
    rolesConfiguration = await rolesService.generateRolesConfiguration(
      'medium', // —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏
      'IT', // –æ—Ç—Ä–∞—Å–ª—å
      'hierarchical', // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
      'standard' // –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–∏
export async function getRolePermissions(roleId: UserRole): Promise<RolePermissions> {
  await initializeRolesService();

  const roleConfig = rolesConfiguration!.roles.find(r => r.roleId === roleId);
  if (roleConfig) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GeneratedRolePermissions –≤ RolePermissions
    const {
      roleId: _,
      businessContext: __,
      reasoning: ___,
      recommendedResponsibilities: ____,
      securityLevel: _____,
      ...permissions
    } = roleConfig;
    return permissions;
  }

  // Fallback –∫ —Å—Ç–∞—Ç–∏—á–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º
  return getFallbackRolePermissions(roleId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ä–æ–ª–µ–π
export async function getAllRolePermissions(): Promise<Record<UserRole, RolePermissions>> {
  await initializeRolesService();

  const permissions: Record<UserRole, RolePermissions> = {} as Record<UserRole, RolePermissions>;

  for (const roleId of ['administrator', 'managing_director', 'director', 'manager', 'employee'] as UserRole[]) {
    permissions[roleId] = await getRolePermissions(roleId);
  }

  return permissions;
}

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—Ç–∞—Ç–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const ROLE_PERMISSIONS: Record<UserRole, RolePermissions> = {
  administrator: getFallbackRolePermissions('administrator'),
  managing_director: getFallbackRolePermissions('managing_director'),
  director: getFallbackRolePermissions('director'),
  manager: getFallbackRolePermissions('manager'),
  employee: getFallbackRolePermissions('employee'),
};

// Fallback —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function getFallbackRolePermissions(roleId: UserRole): RolePermissions {
  const fallbackPermissions = {
    administrator: {
      canAccessHRChat: true,
      canAccessOrgChart: true,
      canAccessEmployees: true,
      canAccessAssessments: true,
      canAccessReports: true,
      canCreateUsers: true,
      canEditUsers: true,
      canDeleteUsers: true,
      canManageCompany: true,
      canAccessSettings: true,
      canGenerateInvites: true,
      canManageRoles: true,
      canViewAllData: true,
      maxInvitesPerDay: undefined,
      maxAssessmentsPerMonth: undefined,
    },
    managing_director: {
      canAccessHRChat: true,
      canAccessOrgChart: true,
      canAccessEmployees: true,
      canAccessAssessments: true,
      canAccessReports: true,
      canCreateUsers: true,
      canEditUsers: true,
      canDeleteUsers: true,
      canManageCompany: true,
      canAccessSettings: true,
      canGenerateInvites: true,
      canManageRoles: true,
      canViewAllData: true,
      maxInvitesPerDay: undefined,
      maxAssessmentsPerMonth: undefined,
    },
    director: {
      canAccessHRChat: true,
      canAccessOrgChart: true,
      canAccessEmployees: true,
      canAccessAssessments: true,
      canAccessReports: true,
      canCreateUsers: true,
      canEditUsers: true,
      canDeleteUsers: false,
      canManageCompany: true,
      canAccessSettings: false,
      canGenerateInvites: true,
      canManageRoles: false,
      canViewAllData: true,
      maxInvitesPerDay: undefined,
      maxAssessmentsPerMonth: undefined,
    },
    manager: {
      canAccessHRChat: true,
      canAccessOrgChart: true,
      canAccessEmployees: true,
      canAccessAssessments: true,
      canAccessReports: false,
      canCreateUsers: false,
      canEditUsers: true,
      canDeleteUsers: false,
      canManageCompany: false,
      canAccessSettings: false,
      canGenerateInvites: true,
      canManageRoles: false,
      canViewAllData: false,
      maxInvitesPerDay: 10,
      maxAssessmentsPerMonth: 50,
    },
    employee: {
      canAccessHRChat: true,
      canAccessOrgChart: true,
      canAccessEmployees: false,
      canAccessAssessments: false,
      canAccessReports: false,
      canCreateUsers: false,
      canEditUsers: false,
      canDeleteUsers: false,
      canManageCompany: false,
      canAccessSettings: false,
      canGenerateInvites: false,
      canManageRoles: false,
      canViewAllData: false,
      maxInvitesPerDay: 0,
      maxAssessmentsPerMonth: 5,
    }
  };

  return fallbackPermissions[roleId];
}

export interface RoleInfo {
  name: string;
  description: string;
  color: string;
  icon: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏
export async function getRoleInfo(roleId: UserRole): Promise<RoleInfo> {
  await initializeRolesService();

  const roleInfo = rolesConfiguration!.roleInfos.find(r => r.roleId === roleId);
  if (roleInfo) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º GeneratedRoleInfo –≤ RoleInfo
    const {
      roleId: _,
      hierarchyLevel: __,
      typicalResponsibilities: ___,
      careerPath: ____,
      trainingRequirements: _____,
      ...info
    } = roleInfo;
    return info;
  }

  // Fallback –∫ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  return getFallbackRoleInfo(roleId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Ä–æ–ª—è—Ö
export async function getAllRoleInfos(): Promise<Record<UserRole, RoleInfo>> {
  await initializeRolesService();

  const infos: Record<UserRole, RoleInfo> = {} as Record<UserRole, RoleInfo>;

  for (const roleId of ['administrator', 'managing_director', 'director', 'manager', 'employee'] as UserRole[]) {
    infos[roleId] = await getRoleInfo(roleId);
  }

  return infos;
}

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—Ç–∞—Ç–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const ROLE_INFO: Record<UserRole, RoleInfo> = {
  administrator: getFallbackRoleInfo('administrator'),
  managing_director: getFallbackRoleInfo('managing_director'),
  director: getFallbackRoleInfo('director'),
  manager: getFallbackRoleInfo('manager'),
  employee: getFallbackRoleInfo('employee'),
};

// Fallback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function getFallbackRoleInfo(roleId: UserRole): RoleInfo {
  const fallbackInfos = {
    administrator: {
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
      color: 'bg-red-100 text-red-800 border-red-200',
      icon: 'üîê',
    },
    managing_director: {
      name: '–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
      description: '–í—ã—Å—à–µ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–∏',
      color: 'bg-purple-100 text-purple-800 border-purple-200',
      icon: 'üëë',
    },
    director: {
      name: '–î–∏—Ä–µ–∫—Ç–æ—Ä',
      description: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–µ–π',
      color: 'bg-orange-100 text-orange-800 border-orange-200',
      icon: '‚≠ê',
    },
    manager: {
      name: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–º –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏',
      color: 'bg-blue-100 text-blue-800 border-blue-200',
      icon: 'üëî',
    },
    employee: {
      name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
      description: '–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ HR —Ñ—É–Ω–∫—Ü–∏—è–º',
      color: 'bg-green-100 text-green-800 border-green-200',
      icon: 'üë§',
    }
  };

  return fallbackInfos[roleId];
}