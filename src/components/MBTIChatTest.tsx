import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Brain,
  ArrowLeft,
  Send,
  Bot,
  User,
  CheckCircle,
  Users,
  Lightbulb,
  Heart,
  Target,
  Eye,
  MessageSquare,
  Sparkles,
  Clock,
  AlertTriangle
} from 'lucide-react';
import type { AppUser } from '@/types/profile';
import type { MBTIProfile, MBTI_TYPES } from '@/types/extended-profile';

interface MBTIChatTestProps {
  user: AppUser;
  onBack: () => void;
  onComplete?: (profile: MBTIProfile) => void;
}

interface ChatMessage {
  id: string;
  role: 'ai' | 'user';
  content: string;
  timestamp: Date;
  analysis?: MessageAnalysis;
}

interface MessageAnalysis {
  keywords: string[];
  personalityIndicators: Record<string, number>;
  confidence: number;
  category: 'EI' | 'SN' | 'TF' | 'JP';
}

interface ChatSession {
  id: string;
  userId: string;
  status: 'intro' | 'questioning' | 'analysis' | 'completed';
  currentPhase: number;
  totalPhases: number;
  messages: ChatMessage[];
  analysis: {
    personalityScores: Record<string, number>;
    confidence: number;
    keyInsights: string[];
  };
  mbtiResult?: MBTIProfile;
}

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è ChatGPT
const MBTI_SYSTEM_PROMPTS = {
  intro: `–í—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ MBTI.
–í–∞—à —Å—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π.
–¶–µ–ª—å: –ø—Ä–æ–≤–µ—Å—Ç–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏.

–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, —á—Ç–æ –º—ã –±—É–¥–µ–º –±–µ—Å–µ–¥–æ–≤–∞—Ç—å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ —Ä–∞–±–æ—Ç–µ –∏ –∂–∏–∑–Ω–∏.
–°–ø—Ä–æ—Å–∏—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ —Ö–æ–±–±–∏.`,
  questioning: `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—É—é —Ä–µ–ø–ª–∏–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ MBTI —Ç–∏–ø–æ–≤:

–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è (E) vs –ò–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏—è (I):
- E: –ª—é–±–∏—Ç –æ–±—â–∞—Ç—å—Å—è, —á–µ—Ä–ø–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –æ—Ç –ª—é–¥–µ–π, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤—É—é —Ä–∞–±–æ—Ç—É
- I: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —É–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –≤ –æ–¥–∏–Ω–æ—á–∫—É, –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π

–°–µ–Ω—Å–æ—Ä–∏–∫–∞ (S) vs –ò–Ω—Ç—É–∏—Ü–∏—è (N):
- S: –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π, —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö, –¥–µ—Ç–∞–ª—è—Ö, –Ω–∞—Å—Ç–æ—è—â–µ–º
- N: —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π, –≤–∏–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –±—É–¥—É—â–µ–µ, –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏

–ú—ã—à–ª–µ–Ω–∏–µ (T) vs –ß—É–≤—Å—Ç–≤–∞ (F):
- T: –ª–æ–≥–∏—á–Ω—ã–π, –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π, —Ü–µ–Ω–∏—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å
- F: —ç–º–ø–∞—Ç–∏—á–Ω—ã–π, —Ü–µ–Ω–∏—Ç –≥–∞—Ä–º–æ–Ω–∏—é, —É—á–∏—Ç—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–∞ –¥—Ä—É–≥–∏—Ö

–°—É–∂–¥–µ–Ω–∏–µ (J) vs –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ (P):
- J: –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É
- P: –≥–∏–±–∫–∏–π, —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π, –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º

–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤—ã—è–≤–∏—Ç—å —ç—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è. –ü–æ—Å–ª–µ 8-10 –æ–±–º–µ–Ω–æ–≤ —Ä–µ–ø–ª–∏–∫–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –∞–Ω–∞–ª–∏–∑—É.`,
  analysis: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤—Å—é –±–µ—Å–µ–¥—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø MBTI. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø
- –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤
- –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏ –Ω—é–∞–Ω—Å—ã

–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π 4-–±—É–∫–≤–µ–Ω–Ω—ã–π —Ç–∏–ø –∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ –ø–æ—á–µ–º—É.
–î–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏—é.`
};

export function MBTIChatTest({ user, onBack, onComplete }: MBTIChatTestProps) {
  const [session, setSession] = useState<ChatSession | null>(null);
  const [currentMessage, setCurrentMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    const newSession: ChatSession = {
      id: `mbti-${Date.now()}`,
      userId: user.email || user.name,
      status: 'intro',
      currentPhase: 1,
      totalPhases: 10,
      messages: [],
      analysis: {
        personalityScores: {
          E: 0, I: 0,
          S: 0, N: 0,
          T: 0, F: 0,
          J: 0, P: 0
        },
        confidence: 0,
        keyInsights: []
      }
    };

    setSession(newSession);

    // –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
    setTimeout(() => {
      addAIMessage("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ MBTI. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ –∏ –∂–∏–∑–Ω–∏.\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: —á–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å, –∫–∞–∫–∏–µ —É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–ª–∏ —Ö–æ–±–±–∏? –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ –≤–∞—Å —É–∑–Ω–∞—Ç—å.");
    }, 1000);
  }, [user]);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [session?.messages]);

  // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ChatGPT
  const simulateChatGPTResponse = async (userMessage: string, phase: number): Promise<string> => {
    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 2000));

    const responses = {
      1: `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞—Å—Å–∫–∞–∑! ${userMessage.length > 50 ? '–í—ã –¥–æ–≤–æ–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–ª–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.' : '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏!'}

–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ä–∞–±–æ—Ç–µ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ - –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ? –ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ?`,

      2: `–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é –≤–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ.

–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤—ã –æ–±—ã—á–Ω–æ:
‚Ä¢ –û–±—Å—É–∂–¥–∞–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏–ª–∏ –¥—Ä—É–∑—å—è–º–∏?
‚Ä¢ –ò–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –æ–±–¥—É–º–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ?

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∫–∞–∫–æ–º-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–ª—É—á–∞–µ –∏–∑ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏.`,

      3: `–°–ø–∞—Å–∏–±–æ, —ç—Ç–æ –æ—á–µ–Ω—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä! 

–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞—à–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫ –¥–µ—Ç–∞–ª—è–º. –í—ã –±–æ–ª—å—à–µ –ª—é–±–∏—Ç–µ:
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏?
‚Ä¢ –ò–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥, –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –∏–¥–µ–π?

–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–∑ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —É—á–µ–±—ã.`,

      4: `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥! 

–ê —Ç–µ–ø–µ—Ä—å –≤–æ–ø—Ä–æ—Å –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: –∫–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –¥–µ–¥–ª–∞–π–Ω–∞–º –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é?
‚Ä¢ –í–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ, –∫–æ–≥–¥–∞ –≤—Å–µ —á–µ—Ç–∫–æ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ?
‚Ä¢ –ò–ª–∏ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≥–∏–±–∫–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º?

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ.`,

      5: `–ü–æ–Ω—è—Ç–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–æ–º, –∫–∞–∫ –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏.

–í –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∏–ª–∏ –ø—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º –≤—ã –æ–±—ã—á–Ω–æ:
‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–µ—Ç–µ—Å—å –Ω–∞ –ª–æ–≥–∏–∫–µ, —Ñ–∞–∫—Ç–∞—Ö –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö?
‚Ä¢ –ò–ª–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç–µ —á—É–≤—Å—Ç–≤–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –∏ —Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é?

–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä.`,

      6: `–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä! –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.

–ö–∞–∫ –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–≤–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã?
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏, –≤–µ—á–µ—Ä–∏–Ω–∫–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?
‚Ä¢ –ò–ª–∏ –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ, —á–∏—Ç–∞–µ—Ç–µ, –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Ö–æ–±–±–∏ –Ω–∞–µ–¥–∏–Ω–µ?

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.`,

      7: `–°–ø–∞—Å–∏–±–æ! –ï—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å: –∫–æ–≥–¥–∞ –≤—ã —É–∑–Ω–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ, –≤–∞–º –ª–µ–≥—á–µ:
‚Ä¢ –û—Å–≤–∞–∏–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏?
‚Ä¢ –ò–ª–∏ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –≤–∏–¥–µ—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∏–¥–µ—è–º–∏?

–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–∑ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –æ–ø—ã—Ç–∞.`,

      8: `–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

–î–∞–π—Ç–µ –º–Ω–µ –º–∏–Ω—É—Ç–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à—É –±–µ—Å–µ–¥—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ MBTI...`,

      9: `–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! 

–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã, —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏:

**ENFP - "–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å"**

–ü–æ—á–µ–º—É —ç—Ç–æ—Ç —Ç–∏–ø?
‚Ä¢ –í—ã –ø–æ–∫–∞–∑–∞–ª–∏ –≤—ã—Å–æ–∫—É—é —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—é –≤ –æ–±—â–µ–Ω–∏–∏ –∏ —Ä–∞–±–æ—Ç–µ —Å –ª—é–¥—å–º–∏
‚Ä¢ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Ä–∞–∑–≤–∏—Ç—É—é –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
‚Ä¢ –í—ã —Ü–µ–Ω–∏—Ç–µ —á—É–≤—Å—Ç–≤–∞ –∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≥–∏–±–∫–æ—Å—Ç—å –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ

–≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç MBTI.`,

      10: `–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –±–µ—Å–µ–¥—É! 

–í–∞—à —Ç–∏–ø ENFP –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—ã:
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ª–∏–¥–µ—Ä
‚Ä¢ –õ—é–±–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è
‚Ä¢ –•–æ—Ä–æ—à–æ –≤–∏–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –±—É–¥—É—â–µ–µ
‚Ä¢ –¶–µ–Ω–∏—Ç–µ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö

–í —Ä–∞–±–æ—Ç–µ –≤–∞–º –ø–æ–¥–æ–π–¥—É—Ç —Ä–æ–ª–∏, –≥–¥–µ –º–æ–∂–Ω–æ:
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏
‚Ä¢ –í–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—É
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏
‚Ä¢ –ò–º–µ—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫—É—é —Å–≤–æ–±–æ–¥—É`
    };

    return responses[phase as keyof typeof responses] || responses[1];
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç AI
  const addAIMessage = (content: string) => {
    if (!session) return;

    const aiMessage: ChatMessage = {
      id: `ai-${Date.now()}`,
      role: 'ai',
      content,
      timestamp: new Date()
    };

    setSession(prev => prev ? {
      ...prev,
      messages: [...prev.messages, aiMessage]
    } : null);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const sendMessage = async () => {
    if (!currentMessage.trim() || !session) return;

    const userMessage: ChatMessage = {
      id: `user-${Date.now()}`,
      role: 'user',
      content: currentMessage,
      timestamp: new Date()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setSession(prev => prev ? {
      ...prev,
      messages: [...prev.messages, userMessage]
    } : null);

    setCurrentMessage('');
    setIsTyping(true);

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç "ChatGPT"
    const aiResponse = await simulateChatGPTResponse(currentMessage, session.currentPhase);

    setIsTyping(false);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
    const aiMessage: ChatMessage = {
      id: `ai-${Date.now()}`,
      role: 'ai',
      content: aiResponse,
      timestamp: new Date()
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    setSession(prev => {
      if (!prev) return null;

      const newPhase = prev.currentPhase < prev.totalPhases ? prev.currentPhase + 1 : prev.currentPhase;
      const newStatus = newPhase >= prev.totalPhases ? 'analysis' : prev.status;

      return {
        ...prev,
        currentPhase: newPhase,
        status: newStatus,
        messages: [...prev.messages, aiMessage]
      };
    });
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
  const completeAnalysis = () => {
    if (!session) return;

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    const personalityScores = {
      E: 65, I: 35,
      S: 40, N: 60,
      T: 45, F: 55,
      J: 30, P: 70
    };

    const mbtiType = 'ENFP' as keyof typeof MBTI_TYPES;

    const profile: MBTIProfile = {
      type: mbtiType,
      dimensions: {
        extraversion: personalityScores.E,
        sensing: personalityScores.S,
        thinking: personalityScores.T,
        judging: personalityScores.J
      },
      strengths: MBTI_TYPES[mbtiType]?.strengths || ['–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥', '–≠–º–ø–∞—Ç–∏—è', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π'],
      developmentAreas: MBTI_TYPES[mbtiType]?.challenges || ['–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å', '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞'],
      workPreferences: ['–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞', '–†–∞–±–æ—Ç–∞ —Å –ª—é–¥—å–º–∏', '–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫', '–ù–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã'],
      communicationStyle: '–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π',
      teamRole: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –∏ –º–æ—Ç–∏–≤–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã',
      stressFactors: ['–†—É—Ç–∏–Ω–∞', '–ñ–µ—Å—Ç–∫–∏–µ —Ä–∞–º–∫–∏', '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞'],
      motivators: ['–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–≤–æ–±–æ–¥–∞', '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ª—é–¥—å–º–∏', '–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏']
    };

    setSession(prev => prev ? {
      ...prev,
      status: 'completed',
      mbtiResult: profile
    } : null);

    if (onComplete) {
      onComplete(profile);
    }
  };

  if (!session) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  const progress = (session.currentPhase / session.totalPhases) * 100;

  return (
    <div className="min-h-screen bg-black text-white p-6">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between bg-white/5 backdrop-blur-xl border border-white/10 rounded-3xl p-4 md:p-8 shadow-2xl">
          <div className="flex items-center gap-3">
            <Button onClick={onBack} variant="outline" size="sm" className="bg-white/5 border-white/10 text-white hover:bg-white/10">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <div>
              <h1 className="text-3xl font-bold text-white">MBTI –ß–∞—Ç-—Ç–µ—Å—Ç</h1>
              <p className="text-gray-400 text-sm">–û–±—â–µ–Ω–∏–µ —Å –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏</p>
            </div>
          </div>
          <Badge className="bg-purple-600 text-white">
            <Brain className="h-4 w-4 mr-1" />
            {Math.round(progress)}%
          </Badge>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <Card className="bg-white/5 border-white/10 text-white">
          <CardContent className="p-6">
            <div className="flex justify-between text-sm text-gray-400 mb-2">
              <span>–§–∞–∑–∞ {session.currentPhase} –∏–∑ {session.totalPhases}</span>
              <span>{session.messages.filter(m => m.role === 'user').length} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ</span>
            </div>
            <Progress value={progress} className="h-2" />
          </CardContent>
        </Card>

        {/* –ß–∞—Ç */}
        <Card className="bg-white/5 border-white/10 text-white h-[600px] flex flex-col">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5" />
              –ë–µ—Å–µ–¥–∞ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º
            </CardTitle>
            <CardDescription className="text-gray-400">
              –û—Ç–≤–µ—á–∞–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏
            </CardDescription>
          </CardHeader>

          <CardContent className="flex-1 overflow-y-auto space-y-4 p-4">
            {session.messages.map((message) => (
              <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-[80%] p-4 rounded-xl ${
                  message.role === 'user'
                    ? 'bg-purple-600 text-white ml-4'
                    : 'bg-white/10 text-white mr-4'
                }`}>
                  <div className="flex items-center gap-2 mb-2">
                    {message.role === 'ai' ? (
                      <Bot className="h-4 w-4 text-purple-400" />
                    ) : (
                      <User className="h-4 w-4 text-blue-400" />
                    )}
                    <span className="text-sm font-medium">
                      {message.role === 'ai' ? '–ü—Å–∏—Ö–æ–ª–æ–≥' : '–í—ã'}
                    </span>
                    <span className="text-xs text-gray-400">
                      {message.timestamp.toLocaleTimeString()}
                    </span>
                  </div>
                  <div className="whitespace-pre-wrap">
                    {message.content}
                  </div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-white/10 text-white p-4 rounded-xl mr-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Bot className="h-4 w-4 text-purple-400" />
                    <span className="text-sm font-medium">–ü—Å–∏—Ö–æ–ª–æ–≥</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                    <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                    <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </CardContent>

          {/* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è */}
          {session.status !== 'completed' && (
            <div className="p-4 border-t border-white/10">
              <div className="flex gap-3">
                <Textarea
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                  value={currentMessage}
                  onChange={(e) => setCurrentMessage(e.target.value)}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      sendMessage();
                    }
                  }}
                  className="bg-white/5 border-white/10 text-white placeholder:text-gray-400 flex-1"
                  rows={2}
                  disabled={isTyping}
                />
                <Button
                  onClick={sendMessage}
                  disabled={!currentMessage.trim() || isTyping}
                  className="bg-purple-600 hover:bg-purple-700 px-6"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>
              <div className="text-xs text-gray-400 mt-2">
                –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Ä¢ Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
              </div>
            </div>
          )}
        </Card>

        {/* –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ */}
        {session.status === 'analysis' && !session.mbtiResult && (
          <Card className="bg-white/5 border-white/10 text-white text-center">
            <CardContent className="p-8">
              <Sparkles className="h-16 w-16 text-purple-500 mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-2">–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
              <p className="text-gray-400 mb-6">
                –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ MBTI.
              </p>
              <Button onClick={completeAnalysis} className="bg-purple-600 hover:bg-purple-700">
                –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </Button>
            </CardContent>
          </Card>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        {session.status === 'completed' && session.mbtiResult && (
          <div className="space-y-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
            <div className="text-center bg-white/5 backdrop-blur-xl border border-white/10 rounded-3xl p-8 shadow-2xl">
              <div className="w-20 h-20 bg-gradient-to-br from-purple-600 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                <Brain className="h-10 w-10 text-white" />
              </div>
              <h1 className="text-4xl font-bold text-white mb-2">–í–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏</h1>
              <div className="text-6xl font-bold bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent mb-2">
                {session.mbtiResult.type}
              </div>
              <p className="text-xl text-gray-300">
                {MBTI_TYPES[session.mbtiResult.type]?.name || '–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å'}
              </p>
              <p className="text-gray-400 mt-2">
                {MBTI_TYPES[session.mbtiResult.type]?.description || '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤'}
              </p>
            </div>

            {/* –ò–∑–º–µ—Ä–µ–Ω–∏—è */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="h-5 w-5" />
                    –ò—Å—Ç–æ—á–Ω–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span>–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏—è</span>
                      <span>–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è</span>
                    </div>
                    <Progress value={session.mbtiResult.dimensions.extraversion} className="h-3" />
                    <p className="text-center text-sm text-gray-400">
                      {session.mbtiResult.dimensions.extraversion}% —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Eye className="h-5 w-5" />
                    –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span>–ò–Ω—Ç—É–∏—Ü–∏—è</span>
                      <span>–°–µ–Ω—Å–æ—Ä–∏–∫–∞</span>
                    </div>
                    <Progress value={session.mbtiResult.dimensions.sensing} className="h-3" />
                    <p className="text-center text-sm text-gray-400">
                      {session.mbtiResult.dimensions.sensing}% —Å–µ–Ω—Å–æ—Ä–∏–∫–∞
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Brain className="h-5 w-5" />
                    –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span>–ß—É–≤—Å—Ç–≤–∞</span>
                      <span>–ú—ã—à–ª–µ–Ω–∏–µ</span>
                    </div>
                    <Progress value={session.mbtiResult.dimensions.thinking} className="h-3" />
                    <p className="text-center text-sm text-gray-400">
                      {session.mbtiResult.dimensions.thinking}% –º—ã—à–ª–µ–Ω–∏–µ
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span>–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ</span>
                      <span>–°—É–∂–¥–µ–Ω–∏–µ</span>
                    </div>
                    <Progress value={session.mbtiResult.dimensions.judging} className="h-3" />
                    <p className="text-center text-sm text-gray-400">
                      {session.mbtiResult.dimensions.judging}% —Å—É–∂–¥–µ–Ω–∏–µ
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CheckCircle className="h-5 w-5 text-green-500" />
                    –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {session.mbtiResult.strengths.map((strength, i) => (
                      <div key={i} className="flex items-center gap-2">
                        <div className="h-2 w-2 bg-green-500 rounded-full" />
                        <span className="text-sm">{strength}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Lightbulb className="h-5 w-5 text-orange-500" />
                    –û–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {session.mbtiResult.developmentAreas.map((area, i) => (
                      <div key={i} className="flex items-center gap-2">
                        <div className="h-2 w-2 bg-orange-500 rounded-full" />
                        <span className="text-sm">{area}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Heart className="h-5 w-5 text-pink-500" />
                    –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä—ã
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {session.mbtiResult.motivators.map((motivator, i) => (
                      <div key={i} className="flex items-center gap-2">
                        <div className="h-2 w-2 bg-pink-500 rounded-full" />
                        <span className="text-sm">{motivator}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="h-5 w-5 text-blue-500" />
                    –†–∞–±–æ—á–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {session.mbtiResult.workPreferences.map((preference, i) => (
                      <div key={i} className="flex items-center gap-2">
                        <div className="h-2 w-2 bg-blue-500 rounded-full" />
                        <span className="text-sm">{preference}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex justify-center gap-4">
              <Button onClick={onBack} variant="outline" className="bg-white/5 border-white/10 text-white hover:bg-white/10">
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å
              </Button>
              <Button
                onClick={() => window.print()}
                className="bg-purple-600 hover:bg-purple-700"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
