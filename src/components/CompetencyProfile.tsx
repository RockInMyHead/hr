import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Award, 
  TrendingUp, 
  Target, 
  Lightbulb, 
  ArrowLeft,
  Star,
  CheckCircle,
  Circle,
  Info
} from 'lucide-react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import type { AppUser } from '@/types/profile';
import type { Employee } from '@/types/employee';
import { STANDARD_COMPETENCIES, type CompetencyDefinition } from '@/types/competencies';

interface CompetencyProfileProps {
  user: AppUser;
  onBack: () => void;
}

interface UserCompetencyData {
  competencyId: string;
  currentValue: number;
  targetValue?: number;
  category: string;
  lastAssessed?: Date;
  improvementPlan?: string[];
}

export function CompetencyProfile({ user, onBack }: CompetencyProfileProps) {
  const [activeTab, setActiveTab] = useState<'overview' | 'detailed' | 'development'>('overview');
  const [userCompetencies, setUserCompetencies] = useState<UserCompetencyData[]>([]);
  const [selectedCompetency, setSelectedCompetency] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ employees
      const raw = localStorage.getItem('hr-employees');
      const employees: Employee[] = raw ? JSON.parse(raw) : [];
      const currentEmployee = employees.find(emp => emp.email === user.email);
      
      if (currentEmployee && currentEmployee.ratings) {
        const competencies: UserCompetencyData[] = Object.entries(currentEmployee.ratings).map(([key, value]) => ({
          competencyId: key,
          currentValue: value,
          targetValue: Math.min(5, value + 1), // –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞ –±–∞–ª–ª –≤—ã—à–µ
          category: STANDARD_COMPETENCIES[key]?.category || 'soft',
          lastAssessed: new Date(), // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª–∞ –±—ã –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
          improvementPlan: generateImprovementPlan(key, value)
        }));
        
        setUserCompetencies(competencies);
      }
    } catch (error) {
      console.error('Error loading competency data:', error);
    }
  }, [user.email]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const generateImprovementPlan = (competencyId: string, currentValue: number): string[] => {
    const competency = STANDARD_COMPETENCIES[competencyId];
    if (!competency) return [];

    const currentLevel = competency.values[currentValue];
    const nextLevel = competency.values[Math.min(5, currentValue + 1)];
    
    if (!nextLevel) return [];

    // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
    const plans: Record<string, string[]> = {
      communication: [
        '–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–µ—Å–µ–¥–∞—Ö',
        '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π',
        '–ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è —É –∫–æ–ª–ª–µ–≥',
        '–ò–∑—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏'
      ],
      leadership: [
        '–í–æ–∑–≥–ª–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É',
        '–ù–∞–π—Ç–∏ –º–µ–Ω—Ç–æ—Ä–∞ —Å—Ä–µ–¥–∏ –æ–ø—ã—Ç–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π',
        '–ò–∑—É—á–∏—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –ª–∏–¥–µ—Ä—Å—Ç–≤—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é',
        '–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á'
      ],
      productivity: [
        '–û—Å–≤–æ–∏—Ç—å –º–µ—Ç–æ–¥—ã —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (GTD, Pomodoro)',
        '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
        '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ç–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ –º–µ—Ç–æ–¥—É –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞',
        '–ò–∑–º–µ—Ä—è—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
      ],
      reliability: [
        '–í–µ—Å—Ç–∏ —É—á–µ—Ç –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ',
        '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
        '–†–µ–≥—É–ª—è—Ä–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã',
        '–í—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–≤–æ, –¥–∞–Ω–Ω–æ–µ –∫–æ–ª–ª–µ–≥–∞–º'
      ],
      initiative: [
        '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–¥–Ω—É –∏–¥–µ—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è',
        '–ò–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã',
        '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ brainstorming —Å–µ—Å—Å–∏—è—Ö',
        '–ë—Ä–∞—Ç—å –Ω–∞ —Å–µ–±—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã'
      ]
    };

    return plans[competencyId] || ['–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏'];
  };

  const getCompetencyColor = (value: number) => {
    if (value >= 4.5) return 'text-green-600 bg-green-100 border-green-200';
    if (value >= 3.5) return 'text-blue-600 bg-blue-100 border-blue-200';
    if (value >= 2.5) return 'text-yellow-600 bg-yellow-100 border-yellow-200';
    return 'text-red-600 bg-red-100 border-red-200';
  };

  const getCompetencyLevel = (value: number) => {
    if (value >= 4.5) return '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π';
    if (value >= 3.5) return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
    if (value >= 2.5) return '–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π';
    if (value >= 1.5) return '–ë–∞–∑–æ–≤—ã–π';
    return '–ù–∞—á–∞–ª—å–Ω—ã–π';
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'technical': return 'üîß';
      case 'soft': return 'üíù';
      case 'leadership': return 'üëë';
      case 'business': return 'üìä';
      default: return '‚≠ê';
    }
  };

  const overallScore = userCompetencies.length > 0 
    ? userCompetencies.reduce((sum, comp) => sum + comp.currentValue, 0) / userCompetencies.length 
    : 0;

  return (
    <div className="min-h-screen bg-black text-white p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 bg-white/5 backdrop-blur-xl border border-white/10 rounded-3xl p-4 md:p-8 shadow-2xl">
          <div className="flex items-center gap-3">
            <Button onClick={onBack} variant="outline" size="sm" className="bg-white/5 border-white/10 text-white hover:bg-white/10">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <div>
              <h1 className="text-3xl font-bold text-white">–ú–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏</h1>
              <p className="text-gray-400 text-sm">–ü—Ä–æ—Ñ–∏–ª—å —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Badge className={getCompetencyColor(overallScore)}>
              <Award className="h-4 w-4 mr-1" />
              {overallScore.toFixed(1)} / 5.0
            </Badge>
          </div>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <Tabs value={activeTab} onValueChange={(value: any) => setActiveTab(value)} className="w-full">
          <TabsList className="grid w-full grid-cols-3 mb-6 bg-white/5 border border-white/10 rounded-2xl p-1">
            <TabsTrigger value="overview" className="data-[state=active]:bg-white/10 data-[state=active]:text-white rounded-xl">
              <Award className="h-4 w-4 mr-2" />
              –û–±–∑–æ—Ä
            </TabsTrigger>
            <TabsTrigger value="detailed" className="data-[state=active]:bg-white/10 data-[state=active]:text-white rounded-xl">
              <Info className="h-4 w-4 mr-2" />
              –î–µ—Ç–∞–ª–∏
            </TabsTrigger>
            <TabsTrigger value="development" className="data-[state=active]:bg-white/10 data-[state=active]:text-white rounded-xl">
              <Target className="h-4 w-4 mr-2" />
              –†–∞–∑–≤–∏—Ç–∏–µ
            </TabsTrigger>
          </TabsList>

          {/* –û–±–∑–æ—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π */}
          <TabsContent value="overview" className="space-y-6">
            {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-gray-300">–û–±—â–∏–π –±–∞–ª–ª</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{overallScore.toFixed(1)} / 5.0</div>
                  <p className="text-xs text-gray-400 mt-1">{getCompetencyLevel(overallScore)} —É—Ä–æ–≤–µ–Ω—å</p>
                </CardContent>
              </Card>

              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-gray-300">–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-green-400">
                    {userCompetencies.filter(c => c.currentValue >= 4).length}
                  </div>
                  <p className="text-xs text-gray-400 mt-1">–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π 4+ –±–∞–ª–ª–æ–≤</p>
                </CardContent>
              </Card>

              <Card className="bg-white/5 border-white/10 text-white">
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-gray-300">–ó–æ–Ω—ã —Ä–æ—Å—Ç–∞</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-yellow-400">
                    {userCompetencies.filter(c => c.currentValue < 3).length}
                  </div>
                  <p className="text-xs text-gray-400 mt-1">–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è</p>
                </CardContent>
              </Card>
            </div>

            {/* –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {Object.entries(
                userCompetencies.reduce((acc, comp) => {
                  if (!acc[comp.category]) acc[comp.category] = [];
                  acc[comp.category].push(comp);
                  return acc;
                }, {} as Record<string, UserCompetencyData[]>)
              ).map(([category, competencies]) => (
                <Card key={category} className="bg-white/5 border-white/10 text-white">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <span className="text-lg">{getCategoryIcon(category)}</span>
                      <span className="capitalize">{category === 'soft' ? '–ì–∏–±–∫–∏–µ –Ω–∞–≤—ã–∫–∏' : category === 'technical' ? '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ' : category === 'leadership' ? '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ' : '–ë–∏–∑–Ω–µ—Å'}</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {competencies.map((comp) => {
                      const competency = STANDARD_COMPETENCIES[comp.competencyId];
                      return (
                        <div key={comp.competencyId} className="space-y-2">
                          <div className="flex items-center justify-between">
                            <span className="font-medium">{competency.name}</span>
                            <Badge className={getCompetencyColor(comp.currentValue)}>
                              {comp.currentValue.toFixed(1)}
                            </Badge>
                          </div>
                          <Progress 
                            value={(comp.currentValue / 5) * 100} 
                            className="h-2 bg-gray-700"
                          />
                          <p className="text-xs text-gray-400">{competency.description}</p>
                        </div>
                      );
                    })}
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          {/* –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
          <TabsContent value="detailed" className="space-y-6">
            <div className="grid gap-6">
              {userCompetencies.map((comp) => {
                const competency = STANDARD_COMPETENCIES[comp.competencyId];
                const currentLevel = competency.values[comp.currentValue];
                
                return (
                  <Card key={comp.competencyId} className="bg-white/5 border-white/10 text-white">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle className="flex items-center gap-2">
                          <span className="text-lg">{getCategoryIcon(comp.category)}</span>
                          {competency.name}
                        </CardTitle>
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button variant="outline" size="sm" className="bg-white/5 border-white/10 text-white hover:bg-white/10">
                              <Info className="h-4 w-4 mr-2" />
                              –í—Å–µ —É—Ä–æ–≤–Ω–∏
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="bg-black border-white/10 text-white max-w-2xl">
                            <DialogHeader>
                              <DialogTitle>{competency.name}</DialogTitle>
                              <DialogDescription className="text-gray-400">
                                {competency.description}
                              </DialogDescription>
                            </DialogHeader>
                            <div className="space-y-4 max-h-96 overflow-y-auto">
                              {Object.values(competency.values).map((level) => (
                                <div 
                                  key={level.value} 
                                  className={`p-4 rounded-xl border ${
                                    level.value === comp.currentValue 
                                      ? 'bg-blue-500/20 border-blue-500' 
                                      : 'bg-white/5 border-white/10'
                                  }`}
                                >
                                  <div className="flex items-center gap-2 mb-2">
                                    <Badge className={getCompetencyColor(level.value)}>
                                      {level.value} –±–∞–ª–ª
                                    </Badge>
                                    <span className="font-semibold">{level.title}</span>
                                    {level.value === comp.currentValue && (
                                      <CheckCircle className="h-4 w-4 text-blue-500" />
                                    )}
                                  </div>
                                  <p className="text-sm text-gray-300 mb-2">{level.description}</p>
                                  {level.examples && level.examples.length > 0 && (
                                    <div className="space-y-1">
                                      <span className="text-xs font-medium text-gray-400">–ü—Ä–∏–º–µ—Ä—ã:</span>
                                      <ul className="text-xs text-gray-400 list-disc list-inside space-y-1">
                                        {level.examples.map((example, i) => (
                                          <li key={i}>{example}</li>
                                        ))}
                                      </ul>
                                    </div>
                                  )}
                                </div>
                              ))}
                            </div>
                          </DialogContent>
                        </Dialog>
                      </div>
                      <CardDescription className="text-gray-400">
                        {competency.description}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        {/* –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å */}
                        <div className="p-4 bg-blue-500/20 border border-blue-500/30 rounded-xl">
                          <div className="flex items-center gap-2 mb-2">
                            <CheckCircle className="h-5 w-5 text-blue-500" />
                            <span className="font-semibold text-blue-300">–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å</span>
                          </div>
                          <div className="flex items-center gap-2 mb-2">
                            <Badge className={getCompetencyColor(comp.currentValue)}>
                              {comp.currentValue} –±–∞–ª–ª
                            </Badge>
                            <span className="font-medium">{currentLevel.title}</span>
                          </div>
                          <p className="text-sm text-gray-300 mb-3">{currentLevel.description}</p>
                          
                          {currentLevel.examples && currentLevel.examples.length > 0 && (
                            <div>
                              <span className="text-xs font-medium text-gray-400 block mb-2">–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:</span>
                              <ul className="text-xs text-gray-400 list-disc list-inside space-y-1">
                                {currentLevel.examples.map((example, i) => (
                                  <li key={i}>{example}</li>
                                ))}
                              </ul>
                            </div>
                          )}
                        </div>

                        {/* –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å */}
                        {comp.targetValue && comp.targetValue > comp.currentValue && (
                          <div className="p-4 bg-green-500/10 border border-green-500/20 rounded-xl">
                            <div className="flex items-center gap-2 mb-2">
                              <Target className="h-5 w-5 text-green-500" />
                              <span className="font-semibold text-green-300">–¶–µ–ª—å —Ä–∞–∑–≤–∏—Ç–∏—è</span>
                            </div>
                            <div className="flex items-center gap-2 mb-2">
                              <Badge className={getCompetencyColor(comp.targetValue)}>
                                {comp.targetValue} –±–∞–ª–ª
                              </Badge>
                              <span className="font-medium">{competency.values[comp.targetValue].title}</span>
                            </div>
                            <p className="text-sm text-gray-300">{competency.values[comp.targetValue].description}</p>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </TabsContent>

          {/* –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è */}
          <TabsContent value="development" className="space-y-6">
            <Card className="bg-white/5 border-white/10 text-white">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Lightbulb className="h-5 w-5" />
                  –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è
                </CardTitle>
                <CardDescription className="text-gray-400">
                  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {userCompetencies
                    .filter(comp => comp.currentValue < 4) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                    .map((comp) => {
                      const competency = STANDARD_COMPETENCIES[comp.competencyId];
                      return (
                        <div key={comp.competencyId} className="p-4 bg-black/20 rounded-xl">
                          <div className="flex items-center justify-between mb-3">
                            <h3 className="font-semibold text-lg">{competency.name}</h3>
                            <Badge className={getCompetencyColor(comp.currentValue)}>
                              {comp.currentValue} ‚Üí {comp.targetValue || comp.currentValue + 1}
                            </Badge>
                          </div>
                          
                          <div className="space-y-3">
                            <h4 className="font-medium text-gray-300">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h4>
                            <ul className="space-y-2">
                              {comp.improvementPlan?.map((action, i) => (
                                <li key={i} className="flex items-start gap-2">
                                  <Circle className="h-4 w-4 text-gray-400 mt-0.5 flex-shrink-0" />
                                  <span className="text-sm text-gray-300">{action}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      );
                    })}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
